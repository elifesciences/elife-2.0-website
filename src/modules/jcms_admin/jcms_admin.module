<?php

/**
 * @file
 * JCMS admin module file.
 */

use Drupal\Core\Database\Query\Condition;
use Drupal\Core\Database\Query\SelectInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;
use Drupal\entityqueue\Entity\EntitySubqueue;
use Drupal\node\Entity\Node;
use Drush\Log\LogLevel;
use Embed\Embed;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function jcms_admin_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() == 'node') {
    switch ($bundle) {
      case 'annual_report':
        $fields['field_annual_report_year']->setDefaultValueCallback('_jcms_admin_default_value_annual_report_year');
        $fields['field_annual_report_uri']->setDefaultValueCallback('_jcms_admin_default_value_annual_report_uri');
        break;

      case 'labs_experiment':
        $fields['field_experiment_number']->setDefaultValueCallback('_jcms_admin_default_value_labs_experiment_number');
        break;

      case 'podcast_episode':
        $fields['field_episode_number']->setDefaultValueCallback('_jcms_admin_default_value_podcast_episode_number');
        break;
    }
  }
}

/**
 * Get default value for annual_report:title.
 *
 * @return string
 *   Report title.
 */
function _jcms_admin_default_value_annual_report_title() {
  return t('The eLife Sciences :year Annual Report', [':year' => _jcms_admin_default_value_annual_report_year()]);
}

/**
 * Get default value for annual_report:field_annual_report_uri.
 *
 * @return array
 *   Report uri.
 */
function _jcms_admin_default_value_annual_report_uri() {
  return ['uri' => sprintf('https://%d.elifesciences.org', _jcms_admin_default_value_annual_report_year())];
}

/**
 * Get default value for annual_report:field_annual_report_year.
 *
 * @return int
 *   Report year.
 */
function _jcms_admin_default_value_annual_report_year() {
  return _jcms_admin_field_integer_next('field_annual_report_year', date('Y'), 'annual_report');
}

/**
 * Get default value for labs_experiment:field_experiment_number.
 *
 * @return int
 *   Labs post number.
 */
function _jcms_admin_default_value_labs_experiment_number() {
  return _jcms_admin_field_integer_next('field_experiment_number', 1, 'labs_experiment');
}

/**
 * Get default value for podcast_episode:field_episode_number.
 *
 * @return int
 *   Episode number.
 */
function _jcms_admin_default_value_podcast_episode_number() {
  return _jcms_admin_field_integer_next('field_episode_number', 1, 'podcast_episode');
}

/**
 * Get next value for field.
 *
 * @param string $field_name
 *   Field name.
 * @param null|int|string $default
 *   Default value.
 * @param null|string $content_type
 *   Content type.
 * @param string $sort_order
 *   Sort order.
 * @param int|string $increment
 *   Increment value.
 *
 * @return int
 *   Next value.
 */
function _jcms_admin_field_integer_next(string $field_name, $default = NULL, $content_type = NULL, $sort_order = 'DESC', $increment = 1) {
  $query = Drupal::entityQuery('node')
    ->sort($field_name, $sort_order)
    ->range(0, 1);

  if ($content_type) {
    $query->condition('type', $content_type);
  }

  $nids = $query->execute();

  if (!empty($nids)) {
    $nid = reset($nids);
    $node = Node::load($nid);
    return (int) $node->get($field_name)->getString() + $increment;
  }
  elseif ($default) {
    return (int) $default;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jcms_admin_form_node_annual_report_form_alter(&$form, FormStateInterface $form_state) {
  $form['title']['widget'][0]['value']['#default_value'] = _jcms_admin_default_value_annual_report_title();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jcms_admin_form_entity_subqueue_covers_preview_edit_form_alter(&$form, FormStateInterface $form_state) {
  $max_weight = 0;
  foreach ($form as $key => $value) {
    $value = (array) $value;
    if (!empty($value['#weight'])) {
      $max_weight = max($max_weight, $value['#weight']);
    }
  }
  $form['covers_active_publish'] = [
    '#title' => t('Publish items'),
    '#type' => 'checkbox',
    '#description' => t('Tick this box to transfer the active items (1 - 3) to the current covers list.'),
    '#default_value' => FALSE,
    '#weight' => ++$max_weight,
  ];
  $form['covers_active_reset'] = [
    '#title' => t('Reset items'),
    '#type' => 'checkbox',
    '#description' => t('Tick this box to discard draft covers and reset the list to the current cover items.'),
    '#default_value' => FALSE,
    '#weight' => ++$max_weight,
  ];
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      array_unshift($form['actions'][$action]['#submit'], '_jcms_admin_form_entity_subqueue_covers_preview_edit_form_submit');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function jcms_admin_form_node_interview_form_alter(&$form, FormStateInterface $form_state) {
  $max_weight = 0;
  foreach ($form as $key => $value) {
    $value = (array) $value;
    if (!empty($value['#weight'])) {
      $max_weight = max($max_weight, $value['#weight']);
    }
  }

  $query = \Drupal::entityQuery('node')
    ->condition('status', NODE_PUBLISHED)
    ->condition('changed', REQUEST_TIME, '<')
    ->condition('type', 'collection')
    ->addTag('interview_collections_filter');
  $collection_nids = $query->execute();

  if ($collections = Node::loadMultiple($collection_nids)) {
    $form['interview_collections'] = [
      '#title' => t('Add to collection'),
      '#type' => 'checkboxes',
      '#default_value' => [],
      '#options' => [],
      '#weight' => ++$max_weight,
    ];
    foreach ($collections as $collection) {
      $form['interview_collections']['#options'][$collection->id()] = $collection->label();
    }
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        array_unshift($form['actions'][$action]['#submit'], '_jcms_admin_form_node_interview_form_submit');
      }
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function jcms_admin_query_interview_collections_filter_alter(SelectInterface $query) {
  if ($whitelist = Settings::get('jcms_admin_interview_collections_whitelist')) {
    $db_or = new Condition('OR');
    foreach ($whitelist as $id) {
      $db_or->condition('uuid', '%' . $id, 'LIKE');
    }
    $query->condition($db_or);
  }
  if ($blacklist = Settings::get('jcms_admin_interview_collections_blacklist')) {
    foreach ($blacklist as $id) {
      $query->condition('uuid', '%' . $id, 'NOT LIKE');
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function jcms_admin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  _jcms_admin_protect_id_field($form, $form_id);
  switch ($form_id) {
    case 'node_article_form':
    case 'node_article_edit_form':
      $form['#validate'][] = '_jcms_admin_form_node_article_form_validate';
      break;

    case 'node_event_form':
    case 'node_event_edit_form':
      $form['#validate'][] = '_jcms_admin_form_node_event_form_validate';
      break;

    case 'node_highlight_list_form':
    case 'node_highlight_list_edit_form':
      $form['#validate'][] = '_jcms_admin_form_node_highlight_list_form_validate';
      break;
  }
}

/**
 * Protect the exposed id field of content from being edited.
 */
function _jcms_admin_protect_id_field(&$form, $form_id) {
  $id_map = [
    'article' => ['title', 'field_page_views'],
    'highlight_list' => 'title',
    'annual_report' => 'field_annual_report_year',
    'labs_experiment' => 'field_experiment_number',
    'podcast_episode' => 'field_episode_number',
  ];

  $type = preg_replace('/^node_(.*)_edit_form$/', '$1', $form_id);

  if (isset($id_map[$type])) {
    $fields = (array) $id_map[$type];
    foreach ($fields as $field) {
      if ($field == 'title') {
        $form['title']['widget'][0]['value']['#disabled'] = TRUE;
      }
      else {
        $form[$field]['#disabled'] = TRUE;
      }
    }
  }
}

/**
 * Submit function for entity_subqueue_covers_preview_edit_form.
 */
function _jcms_admin_form_entity_subqueue_covers_preview_edit_form_submit($form, FormStateInterface $form_state) {
  _jcms_admin_static_store('covers_active_publish', $form_state->getValue('covers_active_publish', 0));
  _jcms_admin_static_store('covers_active_reset', $form_state->getValue('covers_active_reset', 0));
}

/**
 * Submit function for node_interview_form.
 */
function _jcms_admin_form_node_interview_form_submit($form, FormStateInterface $form_state) {
  _jcms_admin_static_store('interview_collections', array_keys(array_filter($form_state->getValue('interview_collections', []))));
}

/**
 * Store and retrieve values from form submission.
 *
 * @param string $key
 *   Identifier.
 * @param mixed|null $value
 *   Value to store.
 *
 * @return mixed|null
 *   Value from store.
 */
function _jcms_admin_static_store($key, $value = NULL) {
  static $values = [];
  if (!is_null($value)) {
    $values[$key] = $value;
  }
  return $values[$key] ?? $value;
}

/**
 * Validation for node_highlight_list_form and node_highlight_list_edit_form.
 */
function _jcms_admin_form_node_highlight_list_form_validate($form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  if (!empty($form_state->getValue('title'))) {
    $title = $form_state->getValue('title')[0]['value'];
    if (!preg_match('/^[a-z0-9-]+$/', $title)) {
      $form_state->setErrorByName('title', t('Highlight list title %title is not valid.', ['%title' => $title]));
    }
    if (!_jcms_admin_node_title_unique($title, $node, 'highlight_list')) {
      $form_state->setErrorByName('title', t('Highlight list title %title is already in use.', ['%title' => $title]));
    }
  }
}

/**
 * Validation function for node_article_form and node_article_edit_form.
 */
function _jcms_admin_form_node_article_form_validate($form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  if (!empty($form_state->getValue('title'))) {
    $title = $form_state->getValue('title')[0]['value'];
    if (!preg_match('/^[0-9]{5,}$/', $title)) {
      $form_state->setErrorByName('title', t('Article title %title is not valid.', ['%title' => $title]));
    }
    if (!_jcms_admin_node_title_unique($title, $node, 'article')) {
      $form_state->setErrorByName('title', t('Article title %title is already in use.', ['%title' => $title]));
    }
  }
}

/**
 * Check if node title is unique.
 *
 * @return bool
 *   True if unique.
 */
function _jcms_admin_node_title_unique(string $title, Node $node, $content_type = NULL) {
  $properties = ['title' => $title];
  if (is_string($content_type)) {
    $properties['type'] = $content_type;
  }

  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties($properties);

  if ($node instanceof Node) {
    unset($nodes[$node->id()]);
  }

  if (!empty($nodes)) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Validation function for node_event_form and node_event_edit_form.
 */
function _jcms_admin_form_node_event_form_validate($form, FormStateInterface $form_state) {
  // Cannot find a better way to check if field_content has a value at this
  // stage.
  $field_content = FALSE;
  foreach (array_keys($form_state->getValue('field_content')) as $content_key) {
    if (is_numeric($content_key)) {
      $field_content = TRUE;
      break;
    }
  }
  if (!$field_content && (empty($form_state->getValue('field_event_uri')) || empty($form_state->getValue('field_event_uri')[0]['uri']))) {
    $form_state->setErrorByName('field_content', t('Content and Event URI are both empty. One must be supplied.'));
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function jcms_admin_paragraph_presave(EntityInterface $entity) {
  if ($entity->bundle() == 'youtube') {
    // Store only the YouTube ID.
    $youtube_id = preg_replace('/^(|.*[^a-zA-Z0-9_-])([a-zA-Z0-9_-]{11})(|[^a-zA-Z0-9_-].*)$/', '$2', $entity->get('field_block_youtube_id')->getString());
    $entity->set('field_block_youtube_id', $youtube_id);
    $dimensions = [];
    try {
      if ($info = Embed::create('https://www.youtube.com/watch?v=' . $youtube_id)) {
        if (isset($info->getProviders()['opengraph'])) {
          /* @var \Embed\Providers\OpenGraph $opengraph */
          $opengraph = $info->getProviders()['opengraph'];
          // Store width and height of video.
          if ($opengraph->getWidth() && $opengraph->getHeight()) {
            $dimensions = [
              'width' => $opengraph->getWidth(),
              'height' => $opengraph->getHeight(),
            ];
          }
        }
      }
    }
    catch (\Exception $e) {
      drupal_set_message(t('YouTube could not be reached.'), LogLevel::WARNING);
      $e_message = "Message: {$e->getMessage()}\n";
      $e_line = "Line: {$e->getLine()}\n";
      $e_trace = "Trace: {$e->getTraceAsString()}\n";
      $error = $e_message . $e_line . $e_trace;
      error_log($error);
    }

    if (empty($dimensions)) {
      drupal_set_message(t('Details unavailable for YouTube ID @id. Using defaults.', ['@id' => $youtube_id]), LogLevel::WARNING);
      $dimensions = [
        'width' => 16,
        'height' => 9,
      ];
    }
    $entity->set('field_block_youtube_width', $dimensions['width']);
    $entity->set('field_block_youtube_height', $dimensions['height']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function jcms_admin_entity_subqueue_presave(EntityInterface $entity) {
  if ($entity->bundle() != 'covers_preview') {
    return NULL;
  }
  if (_jcms_admin_static_store('covers_active_publish')) {
    $items = ($entity->get('items')) ? $entity->get('items')->getValue() : [];
    $items = array_splice($items, 0, $entity->get('field_covers_active_items')->getString());
    foreach ($items as $item) {
      $latest = Node::load($item['target_id']);
      $moderation_info = \Drupal::service('content_moderation.moderation_information');
      if (!$moderation_info->isLatestRevision($latest)) {
        $latest = $moderation_info->getLatestRevision($latest->getEntityTypeId(), $latest->id());
      }
      $latest->set('moderation_state', 'published');
      $latest->save();
    }
    $subqueue = EntitySubqueue::load('covers');
    $subqueue->set('items', $items);
    drupal_set_message(\Drupal::translation()->formatPlural(count($items),
      '%number active item has been published to the current covers list from preview list.',
      '%number active item(s) have been published to the current covers list from preview list.',
      [
        '%number' => count($items),
      ]));
    $subqueue->save();
  }
  if (_jcms_admin_static_store('covers_active_reset')) {
    $subqueue = EntitySubqueue::load('covers');
    $items = ($subqueue->get('items')) ? $subqueue->get('items')->getValue() : [];
    $entity->set('field_covers_active_items', 3);
    foreach ($items as $item) {
      $node = Node::load($item['target_id']);
      $node->set('moderation_state', 'published');
      $node->save();
    }
    $entity->set('items', $items);
    drupal_set_message(\Drupal::translation()->formatPlural(count($items),
      'The covers preview list has been reset to %number item from current list.',
      'The covers preview list has been reset to %number items from current list.',
      [
        '%number' => count($items),
      ]));
  }
}

/**
 * Implements hook_node_delete().
 */
function jcms_admin_node_delete(EntityInterface $entity) {
  if ($entity->bundle() == 'podcast_episode') {
    // Delete orphaned podcast_chapter nodes.
    foreach ($entity->get('field_episode_chapter')->referencedEntities() as $item) {
      $item->delete();
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function jcms_admin_node_insert(EntityInterface $entity) {
  if ($entity->bundle() == 'interview') {
    $collection_nids = _jcms_admin_static_store('interview_collections');
    if (!empty($collection_nids) && $collections = Node::loadMultiple($collection_nids)) {
      foreach ($collections as $collection) {
        $content = $collection->get('field_collection_content')->getValue();
        $content += [
          'target_id' => $entity->id(),
        ];
        $collection->set('field_collection_content', $content);
        $collection->save();
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function jcms_admin_node_presave(Node $node) {
  if ($node->bundle() != 'article') {
    $node->set('field_order_date', $node->getCreatedTime());
  }

  if ($node->hasField('field_content')) {
    if ($node->hasField('field_content_processed_json')) {
      $pluginManager = \Drupal::service('plugin.manager.rest');
      $processed = $pluginManager->createInstance($node->bundle() . '_item_rest_resource', [])->processFieldContent($node->get('field_content'));
      $node->field_content_processed_json = json_encode($processed);
    }
    else {
      // All instances of field_content should be accompanied with
      // field_content_processed_json.
      throw new Exception('Processed json field not found on entity');
    }
  }

  if ($node->bundle() === 'person') {
    $fields = [
      'field_person_affiliation' => ['getter' => 'getAffiliations', 'json_field' => 'field_person_affiliation_json'],
      'field_person_profile' => ['getter' => 'getProfile', 'json_field' => 'field_person_profile_json'],
      'field_research_details' => ['getter' => 'getResearchDetails', 'json_field' => 'field_research_details_json'],
    ];
    $pluginManager = \Drupal::service('plugin.manager.rest');
    $resource = $pluginManager->createInstance($node->bundle() . '_item_rest_resource', []);
    foreach ($fields as $field => $data) {
      if ($node->hasField($field)) {
        if ($node->hasField($data['json_field'])) {
          $processed = $resource->{$data['getter']}($node);
          $node->{$data['json_field']} = json_encode($processed);
        }
      }
    }
  }

  // If content that is configured to use scheduler module and switches from
  // unpublished to published then set the created date to be now.
  if (
    $node->type->entity->getThirdPartySetting('scheduler', 'publish_enable', \Drupal::config('scheduler.settings')->get('default_publish_enable')) &&
    $node->id() &&
    !(bool) $node->get('publish_on')->getValue() &&
    !$node->original->isPublished() &&
    $node->isPublished()
  ) {
    $node->setCreatedTime($node->getChangedTime());
  }
}

/**
 * Implements hook_views_data_alter().
 */
function jcms_admin_views_data_alter(array &$data) {
  $data['node']['jcms_content_link'] = [
    'title' => t('Content link'),
    'field' => [
      'title' => t('Content link'),
      'help' => t('Link to content on Journal.'),
      'id' => 'jcms_content_link',
    ],
  ];
}

/**
 * Implements hook_theme().
 */
function jcms_admin_theme($existing, $type, $theme, $path) {
  return [
    'clipboard_simple' => [
      'variables' => [
        'text' => NULL,
        'button_text' => 'Copy&nbsp;url',
      ],
    ],
  ];
}
